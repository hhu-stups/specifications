/* vim: set syntax=b : */
DEFINITIONS
  "LibraryIO.def";
  /* XXX: testcases */
  /*
   * Checks a set of unit-pairs for conflicts, based on a groups and semesterChoice for each unit
   */
  SAME_RHYTHM(s1,s2) == (s1'rhythm = s2'rhythm /* both in the same rhythm */
                         or s1'rhythm = 0      /* first weekly */
                         or s2'rhythm = 0);    /* second weekly */
  COMPATIBLE_GROUPS(grp1,grp2,restricted_sessions) ==
          !(s1, s2).(s1 : restricted_sessions[grp1'sessions] &
                     s2 : restricted_sessions[grp2'sessions]
              =>
              (SAME_RHYTHM(s1,s2)
                => /* if they are on a rhythm that might interfere, their slots must be different */
                  s1'slot /= s2'slot
              )
          );
  COMPATIBLE_GROUP_EXISTS(grp1,unit2,restricted_sessions) ==
       (unit_max_group(unit2)>1
         =>
          #(gc2).(gc2 : unit_min_group(unit2)..unit_max_group(unit2) & 
                  COMPATIBLE_GROUPS(grp1,unit_group(unit2, gc2),restricted_sessions)))
       /* check that a compatible assignment exists; we could do a similar thing for u1 and/or compute this information statically; these checks can sometimes quite drastically reduce runtime by detecting inconsistencies early but also have a computation cost; ideally we should only execute this if the corresponding groupChoice has not yet been set */
       ;
  CHECK_CS(conflict_set, groupChoice, semesterChoice, local_sessions, ignored_sessions) ==
    #(restricted_sessions).( 
      restricted_sessions = vprintf("restricted_sessions = ~w~n",(ignored_sessions <<| local_sessions))
      & printf("conflict_set = ~w~n",[conflict_set]) 
      /* & observe((semesterChoice,groupChoice)) */
      &
      /* XXX check statically wether u1 and u2 are definetely in conflict or not in conflict; see UnitsDefinitelyInConflict below */
      !(u1, u2).( (u1, u2) : conflict_set =>   /* THIS IMPLICATION IS IMPORTANT !!!! */
       ( semesterChoice(u1) = semesterChoice(u2) =>
        #(group1, group2).( /* LET */
          group1 = unit_group(u1, groupChoice(u1))
          &
          group2 = unit_group(u2, groupChoice(u2))
          /* & printf("Checking groups ~w~n",((groupChoice(u1),group1),(groupChoice(u2),group2)))
          & printf("Checking Sessions ~w~n",(restricted_sessions[group1'sessions],restricted_sessions[group2'sessions])) */
          &
          /* COMPATIBLE_GROUP_EXISTS(group1,u2,restricted_sessions) &
             COMPATIBLE_GROUP_EXISTS(group2,u1,restricted_sessions) & */
          COMPATIBLE_GROUPS(group1,group2,restricted_sessions)
        )
        )
      )
    )
    & printf("~nGroups: ~w~n", [groupChoice])
/*    & printf_nonvar("Groups (nonvar): ~w~n", groupChoice) & observe(groupChoice)
    & printf("Local Sessions: ~w~n", local_sessions)  */
    & printf("Semesters: ~w~n", [semesterChoice]);

    MandatorySlotForUnit == {u,slt|card((units(u)'groups)) = 1 & #(gnr,gr,ss).(gnr|->gr:units(u)'groups & ss:gr'sessions & slt=sessions(ss)'slot)}; /* still takes too long to compute; should also be put as constant if we use it */
    DefinitelyInConflict(u1,u2) == (MandatorySlotForUnit[{u1}] /\ MandatorySlotForUnit[{u2}] /= {});
    NoObviousConflict(u1,u2) == (MandatorySlotForUnit[{u1}] /\ MandatorySlotForUnit[{u2}] = {});
    UnitsDefinitelyInConflict == {u1,u2| u1:dom(MandatorySlotForUnit) & u2:dom(MandatorySlotForUnit) & u1<u2 & DefinitelyInConflict(u1,u2)};
