REFINEMENT teg1ref REFINES teg1
DEFINITIONS
  ASSERT_LTL == "G ({CardF2=bl} => F{CardF2=lb})";
  ASSERT_LTL == "(GF [Eject] & GF({CardF2=bl} & [Csends]) & GF({ReaderF2=bl} & [Rsends])) => G ({CardF2=bl} => F{CardF2=lb})"
/* LTL  0.019 secs, 15 nodes
  G ({CardF2=bl} => F{CardF2=lb})  --> FALSE in 0.01 sec (44 atoms)
  (GF [Eject] & GF({CardF2=bl} & [Csends]) & GF({ReaderF2=bl} & [Rsends])) => G ({CardF2=bl} => F{CardF2=lb}) 
    0.14 secs 6912 atoms
  (GF [Eject] & (GF{CardF2=bl} => GF [Csends]) & (GF{ReaderF2=bl} =>  GF [Rsends])) => G ({CardF2=bl} => F{CardF2=lb}) 
 115.74 secs, 110592 atoms
  not GF({CardF2=bl} & [Csends])
  GF({CardF2=bl} & [Csends])
  G not({CardF2=bl} & [Csends])
  G ({CardF2=bl} & [Csends])
  G ({CardF2=bl} )
*/
SETS
  FRAME = {bl,lb,ackb}
VARIABLES
  SenderF2, Cstatus2, CardF2, ReaderF2
INVARIANT
  SenderF2 : SENDER & CardF2: FRAME & ReaderF2: FRAME &
  Cstatus2 = Cstatus1 &
  (ReaderF2 = bl or ((CardF2=ackb or CardF2=lb) & SenderF2=reader)) <=> (Sender1=reader) &
  (CardF2 = bl or ((ReaderF2=ackb or ReaderF2=lb) & SenderF2=tcard)) <=> (Sender1=tcard)
INITIALISATION
  SenderF2 := reader || Cstatus2 := in || CardF2 := lb || ReaderF2 := lb
OPERATIONS
  Rsends = SELECT (SenderF2=reader & Cstatus2=in & (CardF2=ackb or CardF2=lb)) THEN
    SenderF2 := tcard || ReaderF2 := lb
  END;
  Csends = SELECT (SenderF2=tcard & Cstatus2=in & (ReaderF2=ackb or ReaderF2=lb)) THEN
    SenderF2 := reader || CardF2 := lb
  END;
  Cinsert = SELECT Cstatus2 = out THEN
     SenderF2 := reader || Cstatus2 := in || CardF2 := lb || ReaderF2 := lb
  END;
  Eject = SELECT ((SenderF2=tcard & ReaderF2=lb) or (SenderF2=reader & CardF2=lb)) &
                 Cstatus2=in THEN 
    Cstatus2 := out
  END;
  Rblocksends =  SELECT (SenderF2=reader & Cstatus2=in & (CardF2=ackb or CardF2=lb)) THEN
    SenderF2 := tcard || ReaderF2 := bl
  END;
  Cblocksends =  SELECT (SenderF2=tcard & Cstatus2=in & (ReaderF2=ackb or ReaderF2=lb)) THEN
    SenderF2 := reader || CardF2 := bl
  END;
  Racksends =  SELECT (SenderF2=reader & Cstatus2=in & CardF2=bl) THEN
    SenderF2 := tcard || ReaderF2 := ackb
  END;
  Cacksends =  SELECT (SenderF2=tcard & Cstatus2=in & ReaderF2=bl) THEN
    SenderF2 := reader || CardF2 := ackb
  END
/* FAIRNESS = {Eject, Csends if (CardF2=bl), RSends if (ReaderF2=bl)} */
END