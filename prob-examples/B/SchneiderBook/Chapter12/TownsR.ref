REFINEMENT        TownsR(TOWN)
REFINES           Towns
DEFINITIONS
  scope_TOWN == 1..3;
  SET_PREF_MAX_OPERATIONS == 11
VARIABLES         partition, class

/* class introduced to make it easy to find the equivalence class containing a given element tt */

INVARIANT         partition <: POW(TOWN) 
                  & UNION (cc) . (cc : partition | cc) = TOWN 
                  & ! (cc,dd) . (cc : partition & dd : partition => (cc = dd or cc /\ dd = {}))
                  & ! ee . (ee : TOWN => ((closure1(roads\/roads~)\/id(TOWN))[{ee}] : partition))
                  & class : TOWN --> POW(TOWN)
                  & ! tt . (tt : TOWN => tt : class(tt))
                  & ran(class) = partition         
                  & ! cc . (cc : partition => class~[{cc}] = cc)

INITIALISATION    partition := {cc | cc : POW(TOWN) & card(cc) = 1}
                  || class := {tt,cc | (tt|->cc) : TOWN * POW(TOWN) & cc = {tt} }

OPERATIONS

  link(tt1,tt2) =
  IF class(tt1) /= class(tt2)
  THEN 
       partition := (partition - {class(tt1), class(tt2)}) \/ {class(tt1) \/ class(tt2)} ;
       class := class<+ (class(tt1) \/ class(tt2)) * {class(tt1) \/ class(tt2)} 
  END ;

ans <-- connectedquery(tt1, tt2) = 
  IF class(tt1) = class(tt2)
  THEN ans := connected
  ELSE ans := notconnected
  END 
 
END
