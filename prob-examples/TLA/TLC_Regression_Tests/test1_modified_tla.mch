/*@ generated by TLA2B 1.0.7 Sat Jun 21 10:10:49 CEST 2014 */
MACHINE test1_modified
DEFINITIONS
 ASSERT_TRUE(P, Msg) == 1 = 1;
 EXTERNAL_PREDICATE_ASSERT_TRUE == BOOL * STRING;
 Print(out, val) == val;
 Inv == (((((((((((((({1, 2, 3} /= {3, 2, 2, 1} => ASSERT_TRUE(FALSE, "Failed Test 1"))
 & (not({1, 2, 3} /= {3, 2, 2, 1}) => Print("Test 1 OK", TRUE) = TRUE))
 & (({1, 2, 3} /= {i | i : {5, 4, 3, 2, 1} & i < 4} => ASSERT_TRUE(FALSE, "Failed Test 2"))
 & (not({1, 2, 3} /= {i | i : {5, 4, 3, 2, 1} & i < 4}) => Print("Test 2 OK", TRUE) = TRUE)))
 & (({1, 2, 3} /= {t_ | #(i).(i : {4, 6, 5, 6, 5, 6} & t_ = i - 3)} => ASSERT_TRUE(FALSE, "Failed Test 3"))
 & (not({1, 2, 3} /= {t_ | #(i).(i : {4, 6, 5, 6, 5, 6} & t_ = i - 3)}) => Print("Test 3 OK", TRUE) = TRUE)))
 & ((POW({1, 2, 3}) /= {{}, {1}, {2, 1, 2}, {3, 1}, {2}, {3}, {3, 2, 3}, {1, 2, 3}} => ASSERT_TRUE(FALSE, "Failed Test 4"))
 & (not(POW({1, 2, 3}) /= {{}, {1}, {2, 1, 2}, {3, 1}, {2}, {3}, {3, 2, 3}, {1, 2, 3}}) => Print("Test 4 OK", TRUE) = TRUE)))
 & (({1, 2, 3} /= union(POW({1, 2, 3})) => ASSERT_TRUE(FALSE, "Failed Test 5"))
 & (not({1, 2, 3} /= union(POW({1, 2, 3}))) => Print("Test 5 OK", TRUE) = TRUE)))
 & (({1, 2, 3} /= union({{1}, {2}, {3, 2, 1}}) => ASSERT_TRUE(FALSE, "Failed Test 6"))
 & (not({1, 2, 3} /= union({{1}, {2}, {3, 2, 1}})) => Print("Test 6 OK", TRUE) = TRUE)))
 & (({1, 2, 3} /= ({1} \/ {3, 2}) \/ {} => ASSERT_TRUE(FALSE, "Failed Test 7"))
 & (not({1, 2, 3} /= ({1} \/ {3, 2}) \/ {}) => Print("Test 7 OK", TRUE) = TRUE)))
 & (({1, 2, 3} /= {5, 4, 3, 2, 1} /\ {1, 3, 0, 2} => ASSERT_TRUE(FALSE, "Failed Test 8"))
 & (not({1, 2, 3} /= {5, 4, 3, 2, 1} /\ {1, 3, 0, 2}) => Print("Test 8 OK", TRUE) = TRUE)))
 & (({1, 2, 3} <: {5, 3, 3, 4, 2} => ASSERT_TRUE(FALSE, "Failed Test 9"))
 & (not({1, 2, 3} <: {5, 3, 3, 4, 2}) => Print("Test 9 OK", TRUE) = TRUE)))
 & (({1, 2, 3} /= {5, 3, 3, 4, 2, 1} - {4, 5} => ASSERT_TRUE(FALSE, "Failed Test 10"))
 & (not({1, 2, 3} /= {5, 3, 3, 4, 2, 1} - {4, 5}) => Print("Test 10 OK", TRUE) = TRUE)))
 & (({1, 2, 3} /= 1 .. 3 => ASSERT_TRUE(FALSE, "Failed Test 11"))
 & (not({1, 2, 3} /= 1 .. 3) => Print("Test 11 OK", TRUE) = TRUE)))
 & (({1, 2, 3} /= dom(%(i).(i : {3, 2, 2, 1} | i + 1)) => ASSERT_TRUE(FALSE, "Failed Test 13"))
 & (not({1, 2, 3} /= dom(%(i).(i : {3, 2, 2, 1} | i + 1))) => Print("Test 13 OK", TRUE) = TRUE)))
 & (({} /= {1, 2, 3} --> {} => ASSERT_TRUE(FALSE, "Failed Test 15"))
 & (not({} /= {1, 2, 3} --> {}) => Print("Test 15 OK", TRUE) = TRUE)))
 & Print("Test Completed", TRUE) = TRUE;
VARIABLES x
INVARIANT
x : INTEGER & Inv
INITIALISATION
x:(x = 1)
OPERATIONS
 Next = ANY x_n WHERE x_n : INTEGER & x_n = x THEN x := x_n END
END