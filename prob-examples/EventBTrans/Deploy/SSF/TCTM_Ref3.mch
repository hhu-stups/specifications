MODEL TCTM_Ref3
SETS ADDRESSES;TC_DATA;TM_DATA;DATA;SUBTYPES;TYPES;STATUS={ok,fail,unknown};STEPS={RECEIVE,POLL}
CONSTANTS BuffSize,TC_check,TC_execution,Extract_TC_subtype_and_check,Extract_TC_type_and_check,Prepare_TM_data,Execute_TC_and_Return_Status
PROPERTIES (BuffSize : NATURAL1) & (BuffSize = 16) & (TC_check : (ADDRESSES --> STATUS)) & (TC_execution : (ADDRESSES --> STATUS)) /* &
 (((0 .. (BuffSize - 1)) --> TC_DATA) /= {}) */ /* strange property: causes problems to ProB */
 &
(Prepare_TM_data : (TC_DATA --> TM_DATA)) & ! p.((p : TC_DATA) => ((p : TC_DATA) => # (t,st,d).((t : TYPES & st : SUBTYPES & d : DATA) & ((st : SUBTYPES) & (d : DATA) & (t : TYPES))))) & (Extract_TC_type_and_check : (TC_DATA --> BOOL)) & (Extract_TC_subtype_and_check : (TC_DATA --> BOOL)) & ! (s,f).((s : ADDRESSES & f : POW(ADDRESSES * BOOL)) => (((f : (ADDRESSES --> BOOL)) & (({(s |-> FALSE)} <+ f)(s) = FALSE) & (s : dom(f))) => (f(s) = FALSE))) & ! (s,f).((s : ADDRESSES & f : POW(ADDRESSES * BOOL)) => (((f : (ADDRESSES --> BOOL)) & (({(s |-> TRUE)} <+ f)(s) = TRUE) & (s : dom(f))) => (f(s) = TRUE))) & (Execute_TC_and_Return_Status : (TC_DATA --> BOOL))
VARIABLES Buffer,Init,TCPool,TCR,TCW,TC_queue,TMPool,TM_queue,can_copy,can_execute,can_write,check_ok,checked,checking,execute_ok,executed_step,executing,step
INVARIANT (Buffer : ((0 .. (BuffSize - 1)) --> TC_DATA)) & (TCPool : (ADDRESSES +-> TC_DATA)) & (TMPool : (ADDRESSES +-> TM_DATA)) & (TC_queue <: ADDRESSES) & (TC_queue = dom(TCPool)) & (TM_queue <: ADDRESSES) & (TM_queue = dom(TMPool)) & (can_write : POW((0 .. (BuffSize - 1)))) & (can_copy : POW((0 .. (BuffSize - 1)))) & ((can_copy /\ can_write) = {}) & (can_execute <: ADDRESSES) & (can_execute <: TC_queue) & ! s.((s : ADDRESSES) => ((s : can_execute) => (TC_check(s) = ok))) & ((dom(TMPool) /\ dom(TCPool)) = {}) & (TCW : (0 .. (BuffSize - 1))) & (TCR : (0 .. (BuffSize - 1))) & (step : STEPS) & (Init : BOOL) & (((TCW = TCR) & (step = POLL)) => (card(can_write) = BuffSize)) & (((TCW = TCR) & (step = RECEIVE)) => (card(can_copy) = BuffSize)) & (((TCW /= TCR) or (step = POLL)) => (can_write /= {})) & (((Init = FALSE) & (step = POLL)) => (TCW /: can_write)) & (((TCW /= TCR) or (step = RECEIVE)) => ((TCR /: can_copy) & (can_copy /= {}))) & ((can_copy /= {}) => (TCR : can_copy)) & ((can_write /= {}) => (TCW : can_write)) & (checking <: ADDRESSES) & (check_ok : (ADDRESSES --> BOOL)) & ! s.((s : ADDRESSES) => (((s /: checking) & (s : TC_queue) & (check_ok(s) = TRUE)) => (TC_check(s) = ok))) & ! s.((s : ADDRESSES) => (((s /: checking) & (s : TC_queue) & (check_ok(s) = FALSE)) => (TC_check(s) = fail))) & ! s.((s : ADDRESSES) => (((s : TC_queue) & (s : checking)) => (TC_check(s) = unknown))) & (checked : (0 .. 1)) & (executing <: ADDRESSES) & (execute_ok : (ADDRESSES --> BOOL)) & ! s.((s : ADDRESSES) => (((s /: executing) & (s : TC_queue) & (execute_ok(s) = TRUE)) => (TC_execution(s) = ok))) & ! s.((s : ADDRESSES) => (((s /: executing) & (s : TC_queue) & (execute_ok(s) = FALSE)) => (TC_execution(s) = fail))) & ! s.((s : ADDRESSES) => (((s : TC_queue) & (s : executing)) => (TC_execution(s) = unknown))) & (executed_step : (0 .. 1)) & Buffer:POW((INTEGER * TC_DATA)) & Init:BOOL & TCPool:POW((ADDRESSES * TC_DATA)) & TCR:INTEGER & TCW:INTEGER & TC_queue:POW(ADDRESSES) & TMPool:POW((ADDRESSES * TM_DATA)) & TM_queue:POW(ADDRESSES) & can_copy:POW(INTEGER) & can_execute:POW(ADDRESSES) & can_write:POW(INTEGER) & check_ok:POW((ADDRESSES * BOOL)) & checked:INTEGER & checking:POW(ADDRESSES) & execute_ok:POW((ADDRESSES * BOOL)) & executed_step:INTEGER & executing:POW(ADDRESSES) & step:STEPS

DEFINITIONS
SET_PREF_SHOW_EVENTB_ANY_VALUES==TRUE 
INITIALISATION Buffer :: ((0 .. (BuffSize - 1)) --> TC_DATA) || TCPool := {} || TMPool := {} || TC_queue := {} || TM_queue := {} || can_write := (0 .. (BuffSize - 1)) || can_copy := {} || can_execute := {} || TCW := 0 || TCR := 0 || step := POLL || Init := TRUE || check_ok := (ADDRESSES * {FALSE}) || checking := {} || checked := 1 || executing := {} || execute_ok := (ADDRESSES * {FALSE}) || executed_step := 1
OPERATIONS
 Receive_TC = ANY packet WHERE (packet : TC_DATA) & ((TCW /= TCR) or (step = POLL)) & (Init = FALSE) THEN Buffer := ({(TCW |-> packet)} <+ Buffer) || TCW := ((1 + TCW) mod BuffSize) || can_copy := ({TCW} \/ can_copy) || step := RECEIVE || Init := FALSE END ;
 Pool_TC = ANY a WHERE (a : ADDRESSES) & (a /: (dom(TMPool) \/ dom(TCPool))) & ((TCW /= TCR) or (step = RECEIVE)) THEN TCPool := ({(a |-> Buffer(TCR))} <+ TCPool) || TC_queue := ({a} \/ TC_queue) || TCR := ((1 + TCR) mod BuffSize) || can_copy := (can_copy - {TCR}) || step := POLL || checking := ({a} \/ checking) || checked := 1 END ;
 Report_TC_Check_ok = ANY a,s WHERE (s : TC_queue) & (TC_check(s) = ok) & (a : ADDRESSES) & (a /: (dom(TCPool) \/ dom(TMPool))) THEN TMPool := ({(a |-> Prepare_TM_data(TCPool(s)))} <+ TMPool) || TM_queue := ({a} \/ TM_queue) || can_execute := ({s} \/ can_execute) || executing := ({s} \/ executing) || executed_step := 1 END ;
 Report_TC_Check_fail = ANY a,s WHERE (s : TC_queue) & (TC_check(s) = fail) & (a : ADDRESSES) & (a /: (dom(TCPool) \/ dom(TMPool))) THEN TMPool := ({(a |-> Prepare_TM_data(TCPool(s)))} <+ TMPool) || TM_queue := ({a} \/ TM_queue) || TCPool := ({s} <<| TCPool) || TC_queue := (TC_queue - {s}) END ;
 Report_TC_Execution_ok = ANY a,s WHERE (s : can_execute) & (TC_execution(s) = ok) & (a : ADDRESSES) & (a /: (dom(TCPool) \/ dom(TMPool))) THEN TMPool := ({(a |-> Prepare_TM_data(TCPool(s)))} <+ TMPool) || can_execute := (can_execute - {s}) || TM_queue := ({a} \/ TM_queue) || TCPool := ({s} <<| TCPool) || TC_queue := (TC_queue - {s}) END ;
 Report_TC_Execution_fail = ANY a,s WHERE (s : can_execute) & (TC_execution(s) = fail) & (a : ADDRESSES) & (a /: (dom(TCPool) \/ dom(TMPool))) THEN TMPool := ({(a |-> Prepare_TM_data(TCPool(s)))} <+ TMPool) || can_execute := (can_execute - {s}) || TM_queue := ({a} \/ TM_queue) || TC_queue := (TC_queue - {s}) || TCPool := ({s} <<| TCPool) END ;
 Deliver_TM		 = ANY i WHERE (i : TM_queue) THEN TMPool := ({i} <<| TMPool) || TM_queue := (TM_queue - {i}) END ;
 Verify_TC = ANY s WHERE (s : checking) & (s : TC_queue) THEN check_ok := ({(s |-> bool(((Extract_TC_subtype_and_check(TCPool(s)) = TRUE) & (Extract_TC_type_and_check(TCPool(s)) = TRUE))))} <+ check_ok) || checking := (checking - {s}) || checked := (checked - 1) END ;
 Execute_TC = ANY s WHERE (s : executing) & (s : TC_queue) THEN executing := (executing - {s}) || execute_ok := ({(s |-> bool((Execute_TC_and_Return_Status(TCPool(s)) = TRUE)))} <+ execute_ok) || executed_step := (executed_step - 1) END 
END