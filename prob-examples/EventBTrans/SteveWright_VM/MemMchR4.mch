MODEL MemMchR4
DEFINITIONS
SET_PREF_SHOW_EVENTB_ANY_VALUES==TRUE ; scope_Inst == 25; scope_Data == 10
SETS Inst;Data;Status={LOADING,RUNNING,FAILED,HALTED}
CONSTANTS InvalidInst,ValidInst,ExecInst,StopInst,IncrInst,JumpInst,CondWriteInst,NonJumpInst,VectorWriteInst,JumpAlwaysInst,JumpCondInst,NullInst,Op1WriteInst,Op2WriteInst,ResultWriteInst,StoreWriteInst,Op1WriteImmInst,Op1WriteInstPtrInst,Op1WriteMemInst,Op2WriteImmInst,Op2WriteInstPtrInst,Op2WriteMemInst,DualOpInst,SingleOpInst,Op1WriteDirInst,Op1WriteIndirInst,Op2WriteDirInst,Op2WriteIndirInst,StoreDirInst,StoreIndirInst,Op1WriteDirLargeInst,Op1WriteDirMedInst,Op1WriteDirSmallInst,Op1WriteImmLargeInst,Op1WriteImmMedInst,Op1WriteImmSmallInst,Op1WriteIndirLargeInst,Op1WriteIndirMedInst,Op1WriteIndirSmallInst,Op2WriteDirLargeInst,Op2WriteDirMedInst,Op2WriteDirSmallInst,Op2WriteImmLargeInst,Op2WriteImmMedInst,Op2WriteImmSmallInst,Op2WriteIndirLargeInst,Op2WriteIndirMedInst,Op2WriteIndirSmallInst,StoreDirLargeInst,StoreDirMedInst,StoreDirSmallInst,StoreIndirLargeInst,StoreIndirMedInst,StoreIndirSmallInst,CompFunc,DualOpFunc,SingleOpFunc,InstArrayDom,MaxVector,MaxRoPointer,MaxRwPointer,MinRoPointer,MinRwPointer,RoDom,RwDom,Data2Nat,Nat2Data,ABlankData,DataLarge,DataLarge2DataSmall,DataMed,DataPtr,DataSmall,DataLarge2DataSmall0,DataLarge2DataSmall1,DataLarge2DataSmall2,DataLarge2DataSmall3,DataSmalls2DataLarge,DataSmalls2DataMed,MaxRoAddress,MaxRwAddress,MinRoAddress,MinRwAddress,RoSmallDom,RwSmallDom,Inst2ImmData
PROPERTIES (ValidInst <: Inst) & (ValidInst /= {}) & (InvalidInst <: Inst) & (InvalidInst /= {}) & (Inst = (InvalidInst \/ ValidInst)) & ((InvalidInst /\ ValidInst) = {}) & (ExecInst <: ValidInst) & (ExecInst /= {}) & (StopInst <: ValidInst) & (StopInst /= {}) & (ValidInst = (StopInst \/ ExecInst)) & ((StopInst /\ ExecInst) = {}) & (IncrInst <: ExecInst) & (IncrInst /= {}) & (JumpInst <: ExecInst) & (JumpInst /= {}) & (ExecInst = (JumpInst \/ IncrInst)) & ((JumpInst /\ IncrInst) = {}) & (NonJumpInst <: IncrInst) & (VectorWriteInst <: IncrInst) & (CondWriteInst <: IncrInst) & (IncrInst = (VectorWriteInst \/ CondWriteInst \/ NonJumpInst)) & ((VectorWriteInst /\ NonJumpInst) = {}) & ((CondWriteInst /\ NonJumpInst) = {}) & ((CondWriteInst /\ VectorWriteInst) = {}) & (JumpCondInst <: JumpInst) & (JumpAlwaysInst <: JumpInst) & (JumpInst = (JumpAlwaysInst \/ JumpCondInst)) & ((JumpAlwaysInst /\ JumpCondInst) = {}) & (NullInst <: NonJumpInst) & (NullInst /= {}) & (Op1WriteInst <: NonJumpInst) & (Op1WriteInst /= {}) & (Op2WriteInst <: NonJumpInst) & (Op2WriteInst /= {}) & (StoreWriteInst <: NonJumpInst) & (StoreWriteInst /= {}) & (NonJumpInst = (Op1WriteInst \/ Op2WriteInst \/ StoreWriteInst \/ NullInst)) & 
(ResultWriteInst <: VectorWriteInst) & (VectorWriteInst = ResultWriteInst) & (ResultWriteInst /= {}) & 
((Op1WriteInst /\ NullInst) = {}) & ((Op2WriteInst /\ NullInst) = {}) & ((ResultWriteInst /\ NullInst) = {}) & ((StoreWriteInst /\ NullInst) = {}) & 
((ResultWriteInst /\ Op1WriteInst) = {}) & ((StoreWriteInst /\ Op1WriteInst) = {}) & ((ResultWriteInst /\ Op2WriteInst) = {}) & ((StoreWriteInst /\ Op2WriteInst) = {}) & ((StoreWriteInst /\ ResultWriteInst) = {}) & (Op1WriteImmInst <: Op1WriteInst) & (Op1WriteMemInst <: Op1WriteInst) & (Op1WriteInstPtrInst <: Op1WriteInst) & (Op1WriteInst = (Op1WriteImmInst \/ Op1WriteMemInst \/ Op1WriteInstPtrInst)) & ((Op1WriteMemInst /\ Op1WriteImmInst) = {}) & ((Op1WriteInstPtrInst /\ Op1WriteImmInst) = {}) & ((Op1WriteInstPtrInst /\ Op1WriteMemInst) = {}) & 
(Op2WriteImmInst <: Op2WriteInst) & (Op2WriteMemInst <: Op2WriteInst) & (Op2WriteInstPtrInst <: Op2WriteInst) & (Op2WriteInst = (Op2WriteImmInst \/ Op2WriteMemInst \/ Op2WriteInstPtrInst)) & ((Op2WriteMemInst /\ Op2WriteImmInst) = {}) & ((Op2WriteInstPtrInst /\ Op2WriteImmInst) = {}) & ((Op2WriteInstPtrInst /\ Op2WriteMemInst) = {}) & (SingleOpInst <: ResultWriteInst) & (SingleOpInst /= {}) & (DualOpInst <: ResultWriteInst) & (DualOpInst /= {}) & (ResultWriteInst = (DualOpInst \/ SingleOpInst)) & ((DualOpInst /\ SingleOpInst) = {}) & (Op1WriteDirInst <: Op1WriteMemInst) & (Op1WriteDirInst /= {}) & (Op1WriteIndirInst <: Op1WriteMemInst) & (Op1WriteIndirInst /= {}) & (Op1WriteMemInst = (Op1WriteIndirInst \/ Op1WriteDirInst)) & ((Op1WriteIndirInst /\ Op1WriteDirInst) = {}) & 
(Op2WriteDirInst <: Op2WriteMemInst) & (Op2WriteDirInst /= {}) & (Op2WriteIndirInst <: Op2WriteMemInst) & (Op2WriteIndirInst /= {}) & (Op2WriteMemInst = (Op2WriteIndirInst \/ Op2WriteDirInst)) & ((Op2WriteIndirInst /\ Op2WriteDirInst) = {}) & 
(StoreDirInst <: StoreWriteInst) & (StoreDirInst /= {}) & (StoreIndirInst <: StoreWriteInst) & (StoreIndirInst /= {}) & (StoreWriteInst = (StoreIndirInst \/ StoreDirInst)) & ((StoreIndirInst /\ StoreDirInst) = {}) & (Op1WriteImmSmallInst <: Op1WriteImmInst) & (Op1WriteImmSmallInst /= {}) & (Op1WriteImmMedInst <: Op1WriteImmInst) & (Op1WriteImmMedInst /= {}) & (Op1WriteImmLargeInst <: Op1WriteImmInst) & (Op1WriteImmLargeInst /= {}) & (Op1WriteImmInst = (Op1WriteImmMedInst \/ Op1WriteImmLargeInst \/ Op1WriteImmSmallInst)) & ((Op1WriteImmMedInst /\ Op1WriteImmSmallInst) = {}) & ((Op1WriteImmLargeInst /\ Op1WriteImmSmallInst) = {}) & ((Op1WriteImmLargeInst /\ Op1WriteImmMedInst) = {}) & 
(Op2WriteImmSmallInst <: Op2WriteImmInst) & (Op2WriteImmSmallInst /= {}) & (Op2WriteImmMedInst <: Op2WriteImmInst) & (Op2WriteImmMedInst /= {}) & (Op2WriteImmLargeInst <: Op2WriteImmInst) & (Op2WriteImmLargeInst /= {}) & (Op2WriteImmInst = (Op2WriteImmMedInst \/ Op2WriteImmLargeInst \/ Op2WriteImmSmallInst)) & ((Op2WriteImmMedInst /\ Op2WriteImmSmallInst) = {}) & ((Op2WriteImmLargeInst /\ Op2WriteImmSmallInst) = {}) & ((Op2WriteImmLargeInst /\ Op2WriteImmMedInst) = {}) & 
(Op1WriteDirSmallInst <: Op1WriteDirInst) & (Op1WriteDirSmallInst /= {}) & (Op1WriteDirMedInst <: Op1WriteDirInst) & (Op1WriteDirMedInst /= {}) & (Op1WriteDirLargeInst <: Op1WriteDirInst) & (Op1WriteDirLargeInst /= {}) & (Op1WriteDirInst = (Op1WriteDirMedInst \/ Op1WriteDirLargeInst \/ Op1WriteDirSmallInst)) & ((Op1WriteDirMedInst /\ Op1WriteDirSmallInst) = {}) & ((Op1WriteDirLargeInst /\ Op1WriteDirSmallInst) = {}) & ((Op1WriteDirLargeInst /\ Op1WriteDirMedInst) = {}) & 
(Op2WriteDirSmallInst <: Op2WriteDirInst) & (Op2WriteDirSmallInst /= {}) & (Op2WriteDirMedInst <: Op2WriteDirInst) & (Op2WriteDirMedInst /= {}) & (Op2WriteDirLargeInst <: Op2WriteDirInst) & (Op2WriteDirLargeInst /= {}) & (Op2WriteDirInst = (Op2WriteDirMedInst \/ Op2WriteDirLargeInst \/ Op2WriteDirSmallInst)) & ((Op2WriteDirMedInst /\ Op2WriteDirSmallInst) = {}) & ((Op2WriteDirLargeInst /\ Op2WriteDirSmallInst) = {}) & ((Op2WriteDirLargeInst /\ Op2WriteDirMedInst) = {}) & 
(Op1WriteIndirSmallInst <: Op1WriteIndirInst) & (Op1WriteIndirSmallInst /= {}) & (Op1WriteIndirMedInst <: Op1WriteIndirInst) & (Op1WriteIndirMedInst /= {}) & (Op1WriteIndirLargeInst <: Op1WriteIndirInst) & (Op1WriteIndirLargeInst /= {}) & (Op1WriteIndirInst = (Op1WriteIndirMedInst \/ Op1WriteIndirLargeInst \/ Op1WriteIndirSmallInst)) & ((Op1WriteIndirMedInst /\ Op1WriteIndirSmallInst) = {}) & ((Op1WriteIndirLargeInst /\ Op1WriteIndirSmallInst) = {}) & ((Op1WriteIndirLargeInst /\ Op1WriteIndirMedInst) = {}) & 
(Op2WriteIndirSmallInst <: Op2WriteIndirInst) & (Op2WriteIndirSmallInst /= {}) & (Op2WriteIndirMedInst <: Op2WriteIndirInst) & (Op2WriteIndirMedInst /= {}) & (Op2WriteIndirLargeInst <: Op2WriteIndirInst) & (Op2WriteIndirLargeInst /= {}) & (Op2WriteIndirInst = (Op2WriteIndirMedInst \/ Op2WriteIndirLargeInst \/ Op2WriteIndirSmallInst)) & ((Op2WriteIndirMedInst /\ Op2WriteIndirSmallInst) = {}) & ((Op2WriteIndirLargeInst /\ Op2WriteIndirSmallInst) = {}) & ((Op2WriteIndirLargeInst /\ Op2WriteIndirMedInst) = {}) & 
(StoreDirSmallInst <: StoreDirInst) & (StoreDirSmallInst /= {}) & (StoreDirMedInst <: StoreDirInst) & (StoreDirMedInst /= {}) & (StoreDirLargeInst <: StoreDirInst) & (StoreDirLargeInst /= {}) & (StoreDirInst = (StoreDirMedInst \/ StoreDirLargeInst \/ StoreDirSmallInst)) & ((StoreDirMedInst /\ StoreDirSmallInst) = {}) & ((StoreDirLargeInst /\ StoreDirSmallInst) = {}) & ((StoreDirLargeInst /\ StoreDirMedInst) = {}) & 
(StoreIndirSmallInst <: StoreIndirInst) & (StoreIndirSmallInst /= {}) & (StoreIndirMedInst <: StoreIndirInst) & (StoreIndirMedInst /= {}) & (StoreIndirLargeInst <: StoreIndirInst) & (StoreIndirLargeInst /= {}) & (StoreIndirInst = (StoreIndirMedInst \/ StoreIndirLargeInst \/ StoreIndirSmallInst)) & ((StoreIndirMedInst /\ StoreIndirSmallInst) = {}) & ((StoreDirLargeInst /\ StoreDirSmallInst) = {}) & ((StoreDirLargeInst /\ StoreDirMedInst) = {}) & (SingleOpFunc : (Data --> (Data * BOOL))) & (DualOpFunc : ((Data * Data) --> (Data * BOOL))) & (CompFunc : ((Data * Data) --> BOOL)) & (MaxVector : NATURAL1) & (InstArrayDom = (1 .. MaxVector)) & (MinRwPointer : NATURAL1) & (MaxRwPointer : NATURAL1) & (MinRwPointer <= MaxRwPointer) & (RwDom = (MinRwPointer .. MaxRwPointer)) & ! (d,x,A).((d : Data & x : INTEGER & A : POW(INTEGER * Data)) => (((x : RwDom) & (A : (RwDom --> Data)) & (d : Data)) => (d = A(x)))) & 
(MinRoPointer : NATURAL1) & (MaxRoPointer : NATURAL1) & (MinRoPointer <= MaxRoPointer) & (RoDom = (MinRoPointer .. MaxRoPointer)) & ! (d,x,A).((d : Data & x : INTEGER & A : POW(INTEGER * Data)) => (((x : RoDom) & (A : (RoDom --> Data)) & (d : Data)) => (d = A(x)))) & (MinRwPointer > MaxRoPointer) & (Data2Nat : (Data --> NATURAL)) & (Nat2Data : (NATURAL --> Data)) & (ABlankData : Data) & (Data2Nat(ABlankData) = 0) & (DataLarge = Data) & (DataLarge /= {}) & (DataMed <: DataLarge) & (DataMed /= {}) & (DataSmall <: DataMed) & (DataSmall /= {}) & (DataPtr <: Data) & (DataPtr /= {}) & (DataLarge2DataSmall : (DataLarge --> DataSmall)) & (DataSmalls2DataMed : ((DataSmall * DataSmall) --> DataMed)) & (DataSmalls2DataLarge : ((((DataSmall * DataSmall) * DataSmall) * DataSmall) --> DataLarge)) & (DataLarge2DataSmall0 : (DataLarge --> DataSmall)) & (DataLarge2DataSmall1 : (DataLarge --> DataSmall)) & (DataLarge2DataSmall2 : (DataLarge --> DataSmall)) & (DataLarge2DataSmall3 : (DataLarge --> DataSmall)) & (MinRwAddress : NATURAL1) & (MaxRwAddress : NATURAL1) & (MinRwAddress <= MaxRwAddress) & (RwSmallDom = (MinRwAddress .. MaxRwAddress)) & 
(MinRoAddress : NATURAL1) & (MaxRoAddress : NATURAL1) & (MinRoAddress <= MaxRoAddress) & (RoSmallDom = (MinRoAddress .. MaxRoAddress)) & 
(MinRwAddress = MinRwPointer) & (MaxRwAddress = (3 + MaxRwPointer)) & (MinRoAddress = MinRoPointer) & (MaxRoAddress = (3 + MaxRoPointer)) & ! (x,a,b).((x : INTEGER & a : POW(INTEGER * Data) & b : POW(INTEGER * Data)) => (((a : (RwDom --> Data)) & (b : (RwSmallDom --> DataSmall)) & (x : RwDom)) => (a(x) = b(x)))) & ! (x,a,b).((x : INTEGER & a : POW(INTEGER * Data) & b : POW(INTEGER * Data)) => (((a : (RwDom --> Data)) & (b : (RwSmallDom --> DataSmall)) & (x : RwDom)) => (a(x) = DataSmalls2DataMed((b(x) |-> b((1 + x))))))) & ! (x,a,b).((x : INTEGER & a : POW(INTEGER * Data) & b : POW(INTEGER * Data)) => (((a : (RwDom --> Data)) & (b : (RwSmallDom --> DataSmall)) & (x : RwDom)) => (a(x) = DataSmalls2DataLarge((((b(x) |-> b((1 + x))) |-> b((2 + x))) |-> b((3 + x))))))) & 
! (x,a,b).((x : INTEGER & a : POW(INTEGER * Data) & b : POW(INTEGER * Data)) => (((a : (RoDom --> Data)) & (b : (RoSmallDom --> DataSmall)) & (x : RoDom)) => (a(x) = b(x)))) & ! (x,a,b).((x : INTEGER & a : POW(INTEGER * Data) & b : POW(INTEGER * Data)) => (((a : (RoDom --> Data)) & (b : (RoSmallDom --> DataSmall)) & (x : RoDom)) => (a(x) = DataSmalls2DataMed((b(x) |-> b((1 + x))))))) & ! (x,a,b).((x : INTEGER & a : POW(INTEGER * Data) & b : POW(INTEGER * Data)) => (((a : (RoDom --> Data)) & (b : (RoSmallDom --> DataSmall)) & (x : RoDom)) => (a(x) = DataSmalls2DataLarge((((b(x) |-> b((1 + x))) |-> b((2 + x))) |-> b((3 + x))))))) & 
! (x,A,B,a,b).((x : INTEGER & A : POW(INTEGER * Data) & B : POW(INTEGER * Data) & a : Data & b : Data) => (((A : (RwDom --> Data)) & (B : (RwSmallDom --> DataSmall)) & (a : DataLarge) & (b : DataSmall) & (b = DataLarge2DataSmall0(a)) & (x : RwDom)) => (({(x |-> a)} <+ A) = ({(x |-> b)} <+ B)))) & ! (x,A,B,a,b).((x : INTEGER & A : POW(INTEGER * Data) & B : POW(INTEGER * Data) & a : Data & b : Data) => (((A : (RwDom --> Data)) & (B : (RwSmallDom --> DataSmall)) & (a : DataLarge) & (b : DataSmall) & (b = DataLarge2DataSmall1(a)) & (x : RwDom)) => (({(x |-> a)} <+ A) = ({((1 + x) |-> b)} <+ B)))) & ! (x,A,B,a,b).((x : INTEGER & A : POW(INTEGER * Data) & B : POW(INTEGER * Data) & a : Data & b : Data) => (((A : (RwDom --> Data)) & (B : (RwSmallDom --> DataSmall)) & (a : DataLarge) & (b : DataSmall) & (b = DataLarge2DataSmall2(a)) & (x : RwDom)) => (({(x |-> a)} <+ A) = ({((2 + x) |-> b)} <+ B)))) & ! (x,A,B,a,b).((x : INTEGER & A : POW(INTEGER * Data) & B : POW(INTEGER * Data) & a : Data & b : Data) => (((A : (RwDom --> Data)) & (B : (RwSmallDom --> DataSmall)) & (a : DataLarge) & (b : DataSmall) & (b = DataLarge2DataSmall3(a)) & (x : RwDom)) => (({(x |-> a)} <+ A) = ({((3 + x) |-> b)} <+ B)))) & (Inst2ImmData : (Inst --> Data))
VARIABLES instArray,instPtr,jumpConditional,op1DataLarge,op1Readable,op1Writable,op2DataLarge,op2Readable,op2Writable,resReadable,resWritable,resultDataLarge,roSmallArray,rwSmallArray,status
INVARIANT (status : Status) & (instArray : (InstArrayDom --> Inst)) & (instPtr : InstArrayDom) & (jumpConditional : BOOL) & (op1Writable : BOOL) & (op1Readable : BOOL) & (op2Writable : BOOL) & (op2Readable : BOOL) & (resWritable : BOOL) & (resReadable : BOOL) & (op1DataLarge : DataLarge) & (op2DataLarge : DataLarge) & (resultDataLarge : DataLarge) & (rwSmallArray : (RwSmallDom --> DataSmall)) & (roSmallArray : (RoSmallDom --> DataSmall)) & instArray:POW((INTEGER * Inst)) & instPtr:INTEGER & jumpConditional:BOOL & op1DataLarge:Data & op1Readable:BOOL & op1Writable:BOOL & op2DataLarge:Data & op2Readable:BOOL & op2Writable:BOOL & resReadable:BOOL & resWritable:BOOL & resultDataLarge:Data & roSmallArray:POW((INTEGER * Data)) & rwSmallArray:POW((INTEGER * Data)) & status:Status
ASSERTIONS (Inst /= {}) & (InvalidInst /<: ValidInst) & ((StopInst /\ ExecInst) = {}) & ((JumpInst /\ IncrInst) = {}) & ((StopInst /\ IncrInst) = {}) & ((StopInst /\ JumpInst) = {}) & (Op1WriteInst /<: ResultWriteInst) & (Op2WriteInst /<: ResultWriteInst) & (SingleOpInst /<: DualOpInst) & (Op1WriteInst = (Op1WriteImmInst \/ Op1WriteDirInst \/ Op1WriteIndirInst \/ Op1WriteInstPtrInst)) & (Op2WriteInst = (Op2WriteImmInst \/ Op2WriteDirInst \/ Op2WriteIndirInst \/ Op2WriteInstPtrInst)) & (Data /= {}) & (InstArrayDom /= {}) & (0 /: RwDom) & (RwDom /= {}) & (0 /: RoDom) & (RoDom /= {}) & ((RoDom /\ RwDom) = {}) & ! x.((x : Data) => ((x : DataMed) => (x : DataLarge))) & ! x.((x : Data) => ((x : DataSmall) => (x : DataMed))) & ! x.((x : Data) => ((x : DataSmall) => (x : DataLarge))) & (0 /: RwSmallDom) & (RwSmallDom /= {}) & 
(0 /: RoSmallDom) & (RoSmallDom /= {}) & 
! x.((x : INTEGER) => ((x : RwDom) => (x : RwSmallDom))) & ! x.((x : INTEGER) => ((x : RwDom) => ((1 + x) : RwSmallDom))) & ! x.((x : INTEGER) => ((x : RwDom) => ((2 + x) : RwSmallDom))) & ! x.((x : INTEGER) => ((x : RwDom) => ((3 + x) : RwSmallDom))) & ! x.((x : INTEGER) => ((x : RoDom) => (x : RoSmallDom))) & ! x.((x : INTEGER) => ((x : RoDom) => ((1 + x) : RoSmallDom))) & ! x.((x : INTEGER) => ((x : RoDom) => ((2 + x) : RoSmallDom))) & ! x.((x : INTEGER) => ((x : RoDom) => ((3 + x) : RoSmallDom)))


INITIALISATION instArray :: (InstArrayDom --> Inst) || instPtr := 1 || status := LOADING || jumpConditional :: BOOL || op1DataLarge :: Data || op1Writable :: BOOL || op1Readable :: BOOL || op2DataLarge :: Data || op2Writable :: BOOL || op2Readable :: BOOL || resultDataLarge := ABlankData || resWritable := TRUE || resReadable := FALSE || rwSmallArray :: (RwSmallDom --> DataSmall) || roSmallArray :: (RoSmallDom --> DataSmall)
OPERATIONS
 Loading = SELECT (status = LOADING) THEN instArray :: (InstArrayDom --> Inst) || roSmallArray :: (RoSmallDom --> DataSmall) || status :: {LOADING,RUNNING} END ;
 NullOk = ANY ptrInc WHERE (instArray(instPtr) : NullInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := RUNNING END ;
 Op1WriteInstPtrOk = ANY ptrInc WHERE (ptrInc : NATURAL1) & (instArray(instPtr) : Op1WriteInstPtrInst) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := Nat2Data(instPtr) || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteImmSmallOk = ANY immData,ptrInc WHERE (instArray(instPtr) : Op1WriteImmSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataSmall) & (immData = Inst2ImmData(instArray(instPtr))) & (status = RUNNING) THEN op1DataLarge := immData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL || instPtr := (ptrInc + instPtr) END ;
 Op1WriteImmMedOk = ANY immData,ptrInc WHERE (instArray(instPtr) : Op1WriteImmMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataMed) & (immData = Inst2ImmData(instArray(instPtr))) & (status = RUNNING) THEN op1DataLarge := immData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL || instPtr := (ptrInc + instPtr) END ;
 Op1WriteImmLargeOk = ANY immData,ptrInc WHERE (instArray(instPtr) : Op1WriteImmLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (status = RUNNING) THEN op1DataLarge := immData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL || instPtr := (ptrInc + instPtr) END ;
 Op1WriteRwDirSmallOk = ANY dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op1WriteDirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dirData : DataSmall) & (dirData = rwSmallArray(dirPtr)) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := dirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRwDirMedOk = ANY data0,data1,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op1WriteDirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (data0 : DataSmall) & (data0 = rwSmallArray(dirPtr)) & (data1 : DataSmall) & (data1 = rwSmallArray((1 + dirPtr))) & (dirData : DataMed) & (dirData = DataSmalls2DataMed((data0 |-> data1))) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := dirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRwDirLargeOk = ANY data0,data1,data2,data3,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op1WriteDirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (data0 : DataSmall) & (data0 = rwSmallArray(dirPtr)) & (data1 : DataSmall) & (data1 = rwSmallArray((1 + dirPtr))) & (data2 : DataSmall) & (data2 = rwSmallArray((2 + dirPtr))) & (data3 : DataSmall) & (data3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((data0 |-> data1) |-> data2) |-> data3))) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := dirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRwIndirSmallOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op1WriteIndirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (indirData : DataSmall) & (indirData = rwSmallArray(indirPtr)) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := indirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRwIndirMedOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,iData0,iData1,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op1WriteIndirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (iData0 : DataSmall) & (iData0 = rwSmallArray(indirPtr)) & (iData1 : DataSmall) & (iData1 = rwSmallArray((1 + indirPtr))) & (indirData : DataMed) & (indirData = DataSmalls2DataMed((iData0 |-> iData1))) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := indirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRwIndirLargeOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,iData0,iData1,iData2,iData3,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op1WriteIndirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (iData0 : DataSmall) & (iData0 = rwSmallArray(indirPtr)) & (iData1 : DataSmall) & (iData1 = rwSmallArray((1 + indirPtr))) & (iData2 : DataSmall) & (iData2 = rwSmallArray((2 + indirPtr))) & (iData3 : DataSmall) & (iData3 = rwSmallArray((3 + indirPtr))) & (indirData : DataLarge) & (indirData = DataSmalls2DataLarge((((iData0 |-> iData1) |-> iData2) |-> iData3))) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := indirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRoDirSmallOk = ANY dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op1WriteDirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RoDom) & (dirData : DataSmall) & (dirData = roSmallArray(dirPtr)) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := dirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRoDirMedOk = ANY data0,data1,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op1WriteDirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RoDom) & (data0 : DataSmall) & (data0 = roSmallArray(dirPtr)) & (data1 : DataSmall) & (data1 = roSmallArray((1 + dirPtr))) & (dirData : DataMed) & (dirData = DataSmalls2DataMed((data0 |-> data1))) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := dirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRoDirLargeOk = ANY data0,data1,data2,data3,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op1WriteDirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RoDom) & (data0 : DataSmall) & (data0 = roSmallArray(dirPtr)) & (data1 : DataSmall) & (data1 = roSmallArray((1 + dirPtr))) & (data2 : DataSmall) & (data2 = roSmallArray((2 + dirPtr))) & (data3 : DataSmall) & (data3 = roSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((data0 |-> data1) |-> data2) |-> data3))) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := dirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRoIndirSmallOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op1WriteIndirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RoDom) & (indirData : DataSmall) & (indirData = roSmallArray(indirPtr)) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := indirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRoIndirMedOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,iData0,iData1,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op1WriteIndirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RoDom) & (iData0 : DataSmall) & (iData0 = roSmallArray(indirPtr)) & (iData1 : DataSmall) & (iData1 = roSmallArray((1 + indirPtr))) & (indirData : DataMed) & (indirData = DataSmalls2DataMed((iData0 |-> iData1))) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := indirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteRoIndirLargeOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,iData0,iData1,iData2,iData3,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op1WriteIndirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RoDom) & (iData0 : DataSmall) & (iData0 = roSmallArray(indirPtr)) & (iData1 : DataSmall) & (iData1 = roSmallArray((1 + indirPtr))) & (iData2 : DataSmall) & (iData2 = roSmallArray((2 + indirPtr))) & (iData3 : DataSmall) & (iData3 = roSmallArray((3 + indirPtr))) & (indirData : DataLarge) & (indirData = DataSmalls2DataLarge((((iData0 |-> iData1) |-> iData2) |-> iData3))) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge := indirData || op1Readable := TRUE || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op1WriteDirBadPtr = ANY dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op1WriteDirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr /: RwDom) & (dirPtr /: RoDom) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 Op1WriteIndirBadDirPtr = ANY dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op1WriteIndirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr /: RwDom) & (dirPtr /: RoDom) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 Op1WriteIndirBadIndirPtr = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,immData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op1WriteIndirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr /: RwDom) & (indirPtr /: RoDom) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 Op1WriteNoDest = ANY ptrInc WHERE (instArray(instPtr) : Op1WriteInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op1Writable = FALSE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 Op2WriteInstPtrOk = ANY ptrInc WHERE (ptrInc : NATURAL1) & (instArray(instPtr) : Op2WriteInstPtrInst) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: Data || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := Nat2Data(instPtr) || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteImmSmallOk = ANY immData,ptrInc WHERE (instArray(instPtr) : Op2WriteImmSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataSmall) & (immData = Inst2ImmData(instArray(instPtr))) & (status = RUNNING) THEN op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := immData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL || instPtr := (ptrInc + instPtr) END ;
 Op2WriteImmMedOk = ANY immData,ptrInc WHERE (instArray(instPtr) : Op2WriteImmMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataMed) & (immData = Inst2ImmData(instArray(instPtr))) & (status = RUNNING) THEN op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := immData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL || instPtr := (ptrInc + instPtr) END ;
 Op2WriteImmLargeOk = ANY immData,ptrInc WHERE (instArray(instPtr) : Op2WriteImmLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (status = RUNNING) THEN op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := immData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL || instPtr := (ptrInc + instPtr) END ;
 Op2WriteRwDirSmallOk = ANY dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op2WriteDirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dirData : DataSmall) & (dirData = rwSmallArray(dirPtr)) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := dirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRwDirMedOk = ANY data0,data1,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op2WriteDirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (data0 : DataSmall) & (data0 = rwSmallArray(dirPtr)) & (data1 : DataSmall) & (data1 = rwSmallArray((1 + dirPtr))) & (dirData : DataMed) & (dirData = DataSmalls2DataMed((data0 |-> data1))) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := dirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRwDirLargeOk = ANY data0,data1,data2,data3,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op2WriteDirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (data0 : DataSmall) & (data0 = rwSmallArray(dirPtr)) & (data1 : DataSmall) & (data1 = rwSmallArray((1 + dirPtr))) & (data2 : DataSmall) & (data2 = rwSmallArray((2 + dirPtr))) & (data3 : DataSmall) & (data3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((data0 |-> data1) |-> data2) |-> data3))) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := dirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRwIndirSmallOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op2WriteIndirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (indirData : DataSmall) & (indirData = rwSmallArray(indirPtr)) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := indirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRwIndirMedOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,iData0,iData1,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op2WriteIndirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (iData0 : DataSmall) & (iData0 = rwSmallArray(indirPtr)) & (iData1 : DataSmall) & (iData1 = rwSmallArray((1 + indirPtr))) & (indirData : DataMed) & (indirData = DataSmalls2DataMed((iData0 |-> iData1))) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := indirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRwIndirLargeOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,iData0,iData1,iData2,iData3,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op2WriteIndirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (iData0 : DataSmall) & (iData0 = rwSmallArray(indirPtr)) & (iData1 : DataSmall) & (iData1 = rwSmallArray((1 + indirPtr))) & (iData2 : DataSmall) & (iData2 = rwSmallArray((2 + indirPtr))) & (iData3 : DataSmall) & (iData3 = rwSmallArray((3 + indirPtr))) & (indirData : DataLarge) & (indirData = DataSmalls2DataLarge((((iData0 |-> iData1) |-> iData2) |-> iData3))) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := indirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRoDirSmallOk = ANY dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op2WriteDirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RoDom) & (dirData : DataSmall) & (dirData = roSmallArray(dirPtr)) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := dirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRoDirMedOk = ANY data0,data1,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op2WriteDirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RoDom) & (data0 : DataSmall) & (data0 = roSmallArray(dirPtr)) & (data1 : DataSmall) & (data1 = roSmallArray((1 + dirPtr))) & (dirData : DataMed) & (dirData = DataSmalls2DataMed((data0 |-> data1))) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := dirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRoDirLargeOk = ANY data0,data1,data2,data3,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op2WriteDirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr : RoDom) & (data0 : DataSmall) & (data0 = roSmallArray(dirPtr)) & (data1 : DataSmall) & (data1 = roSmallArray((1 + dirPtr))) & (data2 : DataSmall) & (data2 = roSmallArray((2 + dirPtr))) & (data3 : DataSmall) & (data3 = roSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((data0 |-> data1) |-> data2) |-> data3))) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := dirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRoIndirSmallOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op2WriteIndirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RoDom) & (indirData : DataSmall) & (indirData = roSmallArray(indirPtr)) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := indirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRoIndirMedOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,iData0,iData1,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op2WriteIndirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RoDom) & (iData0 : DataSmall) & (iData0 = roSmallArray(indirPtr)) & (iData1 : DataSmall) & (iData1 = roSmallArray((1 + indirPtr))) & (indirData : DataMed) & (indirData = DataSmalls2DataMed((iData0 |-> iData1))) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := indirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteRoIndirLargeOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,iData0,iData1,iData2,iData3,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op2WriteIndirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = TRUE) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RoDom) & (iData0 : DataSmall) & (iData0 = roSmallArray(indirPtr)) & (iData1 : DataSmall) & (iData1 = roSmallArray((1 + indirPtr))) & (iData2 : DataSmall) & (iData2 = roSmallArray((2 + indirPtr))) & (iData3 : DataSmall) & (iData3 = roSmallArray((3 + indirPtr))) & (indirData : DataLarge) & (indirData = DataSmalls2DataLarge((((iData0 |-> iData1) |-> iData2) |-> iData3))) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge := indirData || op2Readable := TRUE || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL END ;
 Op2WriteDirBadPtr = ANY dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op2WriteDirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr /: RwDom) & (dirPtr /: RoDom) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 Op2WriteIndirBadDirPtr = ANY dirPtr,immData,ptrInc WHERE (instArray(instPtr) : Op2WriteIndirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr /: RwDom) & (dirPtr /: RoDom) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 Op2WriteIndirBadIndirPtr = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,immData,indirPtr,ptrInc WHERE (instArray(instPtr) : Op2WriteIndirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr /: RwDom) & (indirPtr /: RoDom) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 Op2WriteNoDest = ANY ptrInc WHERE (instArray(instPtr) : Op2WriteInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (op2Writable = FALSE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 SingleOpOk = ANY funcOk,funcRes,ptrInc WHERE (ptrInc : NATURAL1) & (funcRes : Data) & (funcOk : BOOL) & ((funcRes |-> funcOk) = SingleOpFunc(op1DataLarge)) & (instArray(instPtr) : SingleOpInst) & ((ptrInc + instPtr) : InstArrayDom) & (op1Readable = TRUE) & (resWritable = TRUE) & (funcOk = TRUE) & (status = RUNNING) THEN op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge := funcRes || resReadable := TRUE || resWritable :: BOOL || instPtr := (ptrInc + instPtr) END ;
 SingleOpNoOp = ANY ptrInc WHERE (ptrInc : NATURAL1) & (instArray(instPtr) : SingleOpInst) & ((ptrInc + instPtr) : InstArrayDom) & (op1Readable = FALSE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 SingleOpFail = ANY funcOk,funcRes,ptrInc WHERE (ptrInc : NATURAL1) & (funcRes : Data) & (funcOk : BOOL) & ((funcRes |-> funcOk) = SingleOpFunc(op1DataLarge)) & (instArray(instPtr) : SingleOpInst) & ((ptrInc + instPtr) : InstArrayDom) & (op1Readable = TRUE) & (resWritable = TRUE) & (funcOk = FALSE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 DualOpOk = ANY funcOk,funcRes,ptrInc WHERE (ptrInc : NATURAL1) & (funcRes : Data) & (funcOk : BOOL) & ((funcRes |-> funcOk) = DualOpFunc((op1DataLarge |-> op2DataLarge))) & (instArray(instPtr) : DualOpInst) & ((ptrInc + instPtr) : InstArrayDom) & (op1Readable = TRUE) & (op2Readable = TRUE) & (resWritable = TRUE) & (funcOk = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge := funcRes || resReadable := TRUE || resWritable :: BOOL END ;
 DualOpNoOp = ANY opsAvail,ptrInc WHERE (ptrInc : NATURAL1) & (instArray(instPtr) : DualOpInst) & ((ptrInc + instPtr) : InstArrayDom) & (opsAvail : BOOL) & (opsAvail = bool(((op2Readable = TRUE) & (op1Readable = TRUE)))) & (opsAvail = FALSE) & (resWritable = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 DualOpFail = ANY funcOk,funcRes,ptrInc WHERE (ptrInc : NATURAL1) & (funcRes : Data) & (funcOk : BOOL) & ((funcRes |-> funcOk) = DualOpFunc((op1DataLarge |-> op2DataLarge))) & (instArray(instPtr) : DualOpInst) & ((ptrInc + instPtr) : InstArrayDom) & (op1Readable = TRUE) & (op2Readable = TRUE) & (resWritable = TRUE) & (funcOk = FALSE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 ResWriteNoDest = ANY ptrInc WHERE (instArray(instPtr) : ResultWriteInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (resWritable = FALSE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 StoreWriteDirSmallOk = ANY dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : StoreDirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (resReadable = TRUE) & (dirData : DataSmall) & (dirData = resultDataLarge) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || rwSmallArray := ({(dirPtr |-> dirData)} <+ rwSmallArray) || op1Readable :: BOOL || op1Writable :: BOOL || op2Readable :: BOOL || op2Writable :: BOOL || resReadable :: BOOL || resWritable :: BOOL END ;
 StoreWriteDirMedOk = ANY data0,data1,dirData,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : StoreDirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (resReadable = TRUE) & (status = RUNNING) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dirData : DataMed) & (dirData = resultDataLarge) & (data0 : DataSmall) & (data0 = DataLarge2DataSmall0(dirData)) & (data1 : DataSmall) & (data1 = DataLarge2DataSmall1(dirData)) THEN instPtr := (ptrInc + instPtr) || rwSmallArray := ({(dirPtr |-> data0)} <+ {((1 + dirPtr) |-> data1)} <+ rwSmallArray) || op1Readable :: BOOL || op1Writable :: BOOL || op2Readable :: BOOL || op2Writable :: BOOL || resReadable :: BOOL || resWritable :: BOOL END ;
 StoreWriteDirLargeOk = ANY data0,data1,data2,data3,dirPtr,immData,ptrInc WHERE (instArray(instPtr) : StoreDirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (data0 : DataSmall) & (data0 = DataLarge2DataSmall0(resultDataLarge)) & (data1 : DataSmall) & (data1 = DataLarge2DataSmall1(resultDataLarge)) & (data2 : DataSmall) & (data2 = DataLarge2DataSmall2(resultDataLarge)) & (data3 : DataSmall) & (data3 = DataLarge2DataSmall3(resultDataLarge)) & (resReadable = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || rwSmallArray := ({(dirPtr |-> data0)} <+ {((1 + dirPtr) |-> data1)} <+ {((2 + dirPtr) |-> data2)} <+ {((3 + dirPtr) |-> data3)} <+ rwSmallArray) || op1Readable :: BOOL || op1Writable :: BOOL || op2Readable :: BOOL || op2Writable :: BOOL || resReadable :: BOOL || resWritable :: BOOL END ;
 StoreWriteIndirSmallOk = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : StoreIndirSmallInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (indirData : DataSmall) & (indirData = resultDataLarge) & (resReadable = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || rwSmallArray := ({(indirPtr |-> indirData)} <+ rwSmallArray) || op1Readable :: BOOL || op1Writable :: BOOL || op2Readable :: BOOL || op2Writable :: BOOL || resReadable :: BOOL || resWritable :: BOOL END ;
 StoreWriteIndirMedOk = ANY dData0,dData1,dData2,dData3,data0,data1,dirData,dirPtr,immData,indirData,indirPtr,ptrInc WHERE (instArray(instPtr) : StoreIndirMedInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (indirData : DataMed) & (indirData = resultDataLarge) & (data0 : DataSmall) & (data0 = DataLarge2DataSmall0(indirData)) & (data1 : DataSmall) & (data1 = DataLarge2DataSmall1(indirData)) & (resReadable = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || rwSmallArray := ({(indirPtr |-> data0)} <+ {((1 + indirPtr) |-> data1)} <+ rwSmallArray) || op1Readable :: BOOL || op1Writable :: BOOL || op2Readable :: BOOL || op2Writable :: BOOL || resReadable :: BOOL || resWritable :: BOOL END ;
 StoreWriteIndirLargeOk = ANY dData0,dData1,dData2,dData3,data0,data1,data2,data3,dirData,dirPtr,immData,indirPtr,ptrInc WHERE (instArray(instPtr) : StoreIndirLargeInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr : RwDom) & (data0 : DataSmall) & (data0 = DataLarge2DataSmall0(resultDataLarge)) & (data1 : DataSmall) & (data1 = DataLarge2DataSmall1(resultDataLarge)) & (data2 : DataSmall) & (data2 = DataLarge2DataSmall2(resultDataLarge)) & (data3 : DataSmall) & (data3 = DataLarge2DataSmall3(resultDataLarge)) & (resReadable = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || rwSmallArray := ({(indirPtr |-> data0)} <+ {((1 + indirPtr) |-> data1)} <+ {((2 + indirPtr) |-> data2)} <+ {((3 + indirPtr) |-> data3)} <+ rwSmallArray) || op1Readable :: BOOL || op1Writable :: BOOL || op2Readable :: BOOL || op2Writable :: BOOL || resReadable :: BOOL || resWritable :: BOOL END ;
 StoreWriteNoSrc = ANY ptrInc WHERE (instArray(instPtr) : StoreWriteInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (resReadable = FALSE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 StoreWriteDirBadPtr = ANY dirPtr,immData,ptrInc WHERE (instArray(instPtr) : StoreDirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr : NATURAL) & (dirPtr = Data2Nat(immData)) & (dirPtr /: RwDom) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 StoreWriteIndirBadDirPtr = ANY dirPtr,immData,ptrInc WHERE (instArray(instPtr) : StoreIndirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (status = RUNNING) & (immData : Data) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr /: RwDom) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 StoreWriteIndirBadIndirPtr = ANY dData0,dData1,dData2,dData3,dirData,dirPtr,immData,indirPtr,ptrInc WHERE (instArray(instPtr) : StoreIndirInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (immData : DataLarge) & (immData = Inst2ImmData(instArray(instPtr))) & (dirPtr = Data2Nat(immData)) & (dirPtr : RwDom) & (dData0 : DataSmall) & (dData0 = rwSmallArray(dirPtr)) & (dData1 : DataSmall) & (dData1 = rwSmallArray((1 + dirPtr))) & (dData2 : DataSmall) & (dData2 = rwSmallArray((2 + dirPtr))) & (dData3 : DataSmall) & (dData3 = rwSmallArray((3 + dirPtr))) & (dirData : DataLarge) & (dirData = DataSmalls2DataLarge((((dData0 |-> dData1) |-> dData2) |-> dData3))) & (indirPtr = Data2Nat(dirData)) & (indirPtr /: RwDom) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 CondWriteOk = ANY compRes,ptrInc WHERE (ptrInc : NATURAL1) & (compRes : BOOL) & (compRes = CompFunc((op1DataLarge |-> op2DataLarge))) & (instArray(instPtr) : CondWriteInst) & ((ptrInc + instPtr) : InstArrayDom) & (op1Readable = TRUE) & (op2Readable = TRUE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || op1DataLarge :: DataLarge || op1Readable :: BOOL || op1Writable :: BOOL || op2DataLarge :: DataLarge || op2Readable :: BOOL || op2Writable :: BOOL || resultDataLarge :: DataLarge || resReadable :: BOOL || resWritable :: BOOL || jumpConditional := compRes END ;
 CondWriteNoOp = ANY opsAvail,ptrInc WHERE (ptrInc : NATURAL1) & (instArray(instPtr) : CondWriteInst) & ((ptrInc + instPtr) : InstArrayDom) & (opsAvail : BOOL) & (opsAvail = bool(((op2Readable = TRUE) & (op1Readable = TRUE)))) & (opsAvail = FALSE) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) || status := FAILED END ;
 IncrInstBadPc = ANY ptrInc WHERE (instArray(instPtr) : IncrInst) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) /: InstArrayDom) & (status = RUNNING) THEN status := FAILED END ;
 JumpTrueOk = SELECT (instArray(instPtr) : JumpCondInst) & (jumpConditional = TRUE) & (resReadable = TRUE) & (Data2Nat(resultDataLarge) : InstArrayDom) & (status = RUNNING) THEN instPtr := Data2Nat(resultDataLarge) || op1Readable :: BOOL || op1Writable :: BOOL || op2Readable :: BOOL || op2Writable :: BOOL || resReadable :: BOOL || resWritable :: BOOL END ;
 JumpTrueNoVector = SELECT (instArray(instPtr) : JumpCondInst) & (jumpConditional = TRUE) & (resReadable = FALSE) & (status = RUNNING) THEN status := FAILED END ;
 JumpTrueBadPc = SELECT (instArray(instPtr) : JumpCondInst) & (jumpConditional = TRUE) & (resReadable = TRUE) & (Data2Nat(resultDataLarge) /: InstArrayDom) & (status = RUNNING) THEN status := FAILED END ;
 JumpFalseOk = ANY ptrInc WHERE (instArray(instPtr) : JumpCondInst) & (jumpConditional = FALSE) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) : InstArrayDom) & (status = RUNNING) THEN instPtr := (ptrInc + instPtr) END ;
 JumpFalseBadPc = ANY ptrInc WHERE (instArray(instPtr) : JumpCondInst) & (jumpConditional = FALSE) & (ptrInc : NATURAL1) & ((ptrInc + instPtr) /: InstArrayDom) & (status = RUNNING) THEN status := FAILED END ;
 JumpOk = SELECT (instArray(instPtr) : JumpAlwaysInst) & (resReadable = TRUE) & (Data2Nat(resultDataLarge) : InstArrayDom) & (status = RUNNING) THEN instPtr := Data2Nat(resultDataLarge) || op1Readable :: BOOL || op1Writable :: BOOL || op2Readable :: BOOL || op2Writable :: BOOL || resReadable :: BOOL || resWritable :: BOOL END ;
 JumpNoVector = SELECT (instArray(instPtr) : JumpAlwaysInst) & (resReadable = FALSE) & (status = RUNNING) THEN status := FAILED END ;
 JumpBadPc = SELECT (instArray(instPtr) : JumpAlwaysInst) & (resReadable = TRUE) & (Data2Nat(resultDataLarge) /: InstArrayDom) & (status = RUNNING) THEN status := FAILED END ;
 StopInstOk = SELECT (instArray(instPtr) : StopInst) & (status = RUNNING) THEN status := HALTED END ;
 BadInst = SELECT (instArray(instPtr) /: ValidInst) & (status = RUNNING) THEN status := FAILED END ;
 Halted = SELECT (status = HALTED) THEN skip END ;
 Failed = SELECT (status = FAILED) THEN skip END 
END