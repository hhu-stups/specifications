package(load_event_b_project([],[event_b_context(none,'SampleRecord',[extends(none,[]),constants(none,[identifier(none,a),identifier(none,b),identifier(none,fld1),identifier(none,fld2),identifier(none,make_rec1),identifier(none,update_rec1_fld1),identifier(none,update_rec1_fld2)]),axioms(none,[member(rodinpos('rec1.fld1.type2','\''),identifier(none,fld1),total_function(none,identifier(none,rec1),identifier(none,'Nodes'))),member(rodinpos('rec1.fld2.type2','('),identifier(none,fld2),total_function(none,identifier(none,rec1),identifier(none,'Nodes'))),member(rodinpos('rec1.feasibility','\''),direct_product(none,identifier(none,fld1),identifier(none,fld2)),total_surjection(none,identifier(none,rec1),cartesian_product(none,identifier(none,'Nodes'),identifier(none,'Nodes')))),member(rodinpos('rec1.closure','\''),direct_product(none,identifier(none,fld1),identifier(none,fld2)),total_injection(none,identifier(none,rec1),cartesian_product(none,identifier(none,'Nodes'),identifier(none,'Nodes')))),member(rodinpos('rec1.make.axm1','\''),identifier(none,make_rec1),total_bijection(none,cartesian_product(none,identifier(none,'Nodes'),identifier(none,'Nodes')),identifier(none,rec1))),forall(rodinpos('rec1.fld1.make.axm2','\''),[identifier(none,fld11),identifier(none,fld21)],implication(none,truth(none),equal(none,function(none,identifier(none,fld1),[function(none,identifier(none,make_rec1),[couple(none,[identifier(none,fld11),identifier(none,fld21)])])]),identifier(none,fld11)))),forall(rodinpos('rec1.fld2.make.axm2','('),[identifier(none,fld11),identifier(none,fld21)],implication(none,truth(none),equal(none,function(none,identifier(none,fld2),[function(none,identifier(none,make_rec1),[couple(none,[identifier(none,fld11),identifier(none,fld21)])])]),identifier(none,fld21)))),member(rodinpos('rec1.fld1.update.axm1','\''),identifier(none,update_rec1_fld1),total_function(none,cartesian_product(none,identifier(none,rec1),identifier(none,'Nodes')),identifier(none,rec1))),member(rodinpos('rec1.fld2.update.axm1','('),identifier(none,update_rec1_fld2),total_function(none,cartesian_product(none,identifier(none,rec1),identifier(none,'Nodes')),identifier(none,rec1))),forall(rodinpos('rec1.fld1.update.axm2','\''),[identifier(none,rec11),identifier(none,fld11)],implication(none,truth(none),equal(none,function(none,identifier(none,update_rec1_fld1),[couple(none,[identifier(none,rec11),identifier(none,fld11)])]),function(none,identifier(none,make_rec1),[couple(none,[identifier(none,fld11),function(none,identifier(none,fld2),[identifier(none,rec11)])])])))),forall(rodinpos('rec1.fld2.update.axm2','('),[identifier(none,rec11),identifier(none,fld21)],implication(none,truth(none),equal(none,function(none,identifier(none,update_rec1_fld2),[couple(none,[identifier(none,rec11),identifier(none,fld21)])]),function(none,identifier(none,make_rec1),[couple(none,[function(none,identifier(none,fld1),[identifier(none,rec11)]),identifier(none,fld21)])])))),member(rodinpos(axm1,'+'),identifier(none,a),identifier(none,rec1)),member(rodinpos(axm2,'-'),identifier(none,b),identifier(none,rec1)),not_equal(rodinpos(axm3,'.'),identifier(none,a),identifier(none,b))]),theorems(none,[]),sets(none,[deferred_set(none,'Nodes'),deferred_set(none,rec1)])])],[],Error)).
