package(load_event_b_project([],[event_b_context(none,definitions,[extends(none,[]),constants(none,[identifier(none,'Divides'),identifier(none,'GCD')]),abstract_constants(none,[]),axioms(none,[equal(rodinpos(definitions,axm,n33),identifier(none,'Divides'),event_b_comprehension_set(none,[identifier(none,i),identifier(none,j)],couple(none,[identifier(none,i),identifier(none,j)]),conjunct(none,member(none,identifier(none,i),integer_set(none)),conjunct(none,member(none,identifier(none,j),integer_set(none)),exists(none,[identifier(none,k)],conjunct(none,member(none,identifier(none,k),integer_set(none)),conjunct(none,member(none,identifier(none,k),interval(none,integer(none,0),identifier(none,j))),equal(none,identifier(none,j),multiplication(none,identifier(none,i),identifier(none,k)))))))))),equal(rodinpos(definitions,axm2,n34),identifier(none,'GCD'),event_b_comprehension_set(none,[identifier(none,x),identifier(none,y),identifier(none,res)],couple(none,[couple(none,[identifier(none,x),identifier(none,y)]),identifier(none,res)]),conjunct(none,member(none,identifier(none,x),integer_set(none)),conjunct(none,member(none,identifier(none,y),integer_set(none)),conjunct(none,member(none,identifier(none,res),integer_set(none)),conjunct(none,member(none,couple(none,[identifier(none,res),identifier(none,x)]),identifier(none,'Divides')),conjunct(none,member(none,couple(none,[identifier(none,res),identifier(none,y)]),identifier(none,'Divides')),forall(none,[identifier(none,r)],implication(none,conjunct(none,member(none,identifier(none,r),integer_set(none)),member(none,identifier(none,r),union(none,interval(none,integer(none,0),identifier(none,x)),interval(none,integer(none,0),identifier(none,y))))),implication(none,conjunct(none,member(none,couple(none,[identifier(none,r),identifier(none,x)]),identifier(none,'Divides')),member(none,couple(none,[identifier(none,r),identifier(none,y)]),identifier(none,'Divides'))),member(none,couple(none,[identifier(none,r),identifier(none,res)]),identifier(none,'Divides')))))))))))),forall(rodinpos(definitions,axm3,n35),[identifier(none,x),identifier(none,y)],implication(none,conjunct(none,member(none,identifier(none,x),integer_set(none)),conjunct(none,member(none,identifier(none,y),integer_set(none)),member(none,couple(none,[couple(none,[identifier(none,x),identifier(none,x)]),identifier(none,y)]),identifier(none,'GCD')))),equal(none,identifier(none,x),identifier(none,y)))),forall(rodinpos(definitions,axm4,n36),[identifier(none,v)],implication(none,member(none,identifier(none,v),integer_set(none)),equal(none,image(none,identifier(none,'GCD'),set_extension(none,[couple(none,[identifier(none,v),identifier(none,v)])])),set_extension(none,[identifier(none,v)])))),forall(rodinpos(definitions,axm5,n37),[identifier(none,x),identifier(none,y)],implication(none,conjunct(none,member(none,identifier(none,x),integer_set(none)),conjunct(none,member(none,identifier(none,y),integer_set(none)),greater(none,minus(none,identifier(none,y),identifier(none,x)),integer(none,0)))),equal(none,image(none,identifier(none,'GCD'),set_extension(none,[couple(none,[identifier(none,x),identifier(none,y)])])),image(none,identifier(none,'GCD'),set_extension(none,[couple(none,[identifier(none,x),minus(none,identifier(none,y),identifier(none,x))])]))))),forall(rodinpos(definitions,axm6,n38),[identifier(none,x),identifier(none,y)],implication(none,conjunct(none,member(none,identifier(none,x),integer_set(none)),member(none,identifier(none,y),integer_set(none))),equal(none,image(none,identifier(none,'GCD'),set_extension(none,[couple(none,[identifier(none,x),identifier(none,y)])])),image(none,identifier(none,'GCD'),set_extension(none,[couple(none,[identifier(none,y),identifier(none,x)])])))))]),theorems(none,[]),sets(none,[])])],[exporter_version(3),theory(theory_name('Theories','Bool'),[],[],[],[operator('AND',[argument(a,bool_set(none)),argument(b,bool_set(none))],disjunct(none,conjunct(none,equal(none,identifier(none,a),boolean_true(none)),equal(none,identifier(none,b),boolean_true(none))),disjunct(none,negation(none,equal(none,identifier(none,a),boolean_true(none))),negation(none,equal(none,identifier(none,b),boolean_true(none))))),[convert_bool(none,conjunct(none,equal(none,identifier(none,a),boolean_true(none)),equal(none,identifier(none,b),boolean_true(none))))],[]),operator('NOT',[argument(a,bool_set(none))],truth(none),[convert_bool(none,equal(none,identifier(none,a),boolean_false(none)))],[])],[],[])],_Error)).

