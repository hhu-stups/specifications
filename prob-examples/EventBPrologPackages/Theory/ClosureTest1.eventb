package(load_event_b_project([event_b_model(none,'ClosureTest1',[sees(none,['DeferredSet']),variables(none,[identifier(none,reachable),identifier(none,rel)]),invariant(none,[member(rodinpos('ClosureTest1',inv1,')'),identifier(none,rel),relations(none,identifier(none,'D'),identifier(none,'D'))),member(rodinpos('ClosureTest1',inv3,'/'),identifier(none,reachable),relations(none,identifier(none,'D'),identifier(none,'D'))),equal(rodinpos('ClosureTest1',inv4,'0'),identifier(none,reachable),extended_expr(none,cls,[identifier(none,rel)],[]))]),theorems(none,[]),events(none,[event(rodinpos('ClosureTest1','INITIALISATION','\''),'INITIALISATION',ordinary(none),[],[],[],[],[assign(rodinpos('ClosureTest1',act1,'\''),[identifier(none,rel)],[empty_set(none)]),assign(rodinpos('ClosureTest1',act3,')'),[identifier(none,reachable)],[empty_set(none)])],[]),event(rodinpos('ClosureTest1',add,'-'),add,ordinary(none),[],[identifier(rodinpos('ClosureTest1',[],'\''),a),identifier(rodinpos('ClosureTest1',[],','),b)],[member(rodinpos('ClosureTest1',grd1,'('),identifier(none,a),identifier(none,'D')),member(rodinpos('ClosureTest1',grd3,'-'),identifier(none,b),identifier(none,'D')),not_member(rodinpos('ClosureTest1',grd2,')'),couple(none,[identifier(none,a),identifier(none,b)]),identifier(none,rel)),less(rodinpos('ClosureTest1',grd4,'.'),card(none,identifier(none,rel)),integer(none,5))],[],[assign(rodinpos('ClosureTest1',act1,'*'),[identifier(none,rel)],[union(none,identifier(none,rel),set_extension(none,[couple(none,[identifier(none,a),identifier(none,b)])]))]),assign(rodinpos('ClosureTest1',act2,'+'),[identifier(none,reachable)],[union(none,identifier(none,reachable),cartesian_product(none,union(none,image(none,reverse(none,identifier(none,reachable)),set_extension(none,[identifier(none,a)])),set_extension(none,[identifier(none,a)])),union(none,image(none,identifier(none,reachable),set_extension(none,[identifier(none,b)])),set_extension(none,[identifier(none,b)]))))])],[])])])],[event_b_context(none,'DeferredSet',[extends(none,[]),constants(none,[]),abstract_constants(none,[]),axioms(none,[finite(rodinpos('DeferredSet',axm1,'('),identifier(none,'D')),equal(rodinpos('DeferredSet',axm2,')'),card(none,identifier(none,'D')),integer(none,5))]),theorems(none,[]),sets(none,[deferred_set(none,'D')])])],[exporter_version(3),po('DeferredSet','Well-definedness of Axiom',[axiom(axm2)],true),po('ClosureTest1','Invariant  establishment',[event('INITIALISATION'),invariant(inv4)],false),po('ClosureTest1','Well-definedness of Guard',[guard(grd4),event(add)],false),po('ClosureTest1','Invariant  preservation',[event(add),invariant(inv4)],false),theory(theory_name('MathExtensions','BoolOps'),[],[],[],[operator('AND',[argument(a,bool_set(none)),argument(b,bool_set(none))],disjunct(none,conjunct(none,equal(none,identifier(none,a),boolean_true(none)),equal(none,identifier(none,b),boolean_true(none))),disjunct(none,negation(none,equal(none,identifier(none,a),boolean_true(none))),negation(none,equal(none,identifier(none,b),boolean_true(none))))),[convert_bool(none,conjunct(none,equal(none,identifier(none,a),boolean_true(none)),equal(none,identifier(none,b),boolean_true(none))))],[]),operator('OR',[argument(a,bool_set(none)),argument(b,bool_set(none))],disjunct(none,equal(none,identifier(none,a),boolean_true(none)),disjunct(none,equal(none,identifier(none,b),boolean_true(none)),conjunct(none,negation(none,equal(none,identifier(none,a),boolean_true(none))),negation(none,equal(none,identifier(none,b),boolean_true(none)))))),[convert_bool(none,disjunct(none,equal(none,identifier(none,a),boolean_true(none)),equal(none,identifier(none,b),boolean_true(none))))],[]),operator('NOT',[argument(a,bool_set(none))],truth(none),[convert_bool(none,negation(none,equal(none,identifier(none,a),boolean_true(none))))],[])],[],[]),theory(theory_name('MathExtensions','BinaryTree'),[],['T'],[datatype('Tree',[identifier(none,'T')],[constructor(empty,[]),constructor(tree,[destructor(left,extended_expr(none,'Tree',[identifier(none,'T')],[])),destructor(val,identifier(none,'T')),destructor(right,extended_expr(none,'Tree',[identifier(none,'T')],[]))])])],[operator(treeDepth,[argument(t,extended_expr(none,'Tree',[identifier(none,'T')],[]))],truth(none),[],[case(t,[],extended_expr(none,empty,[],[]),integer(none,0)),case(t,[l,r,v],extended_expr(none,tree,[identifier(none,l),identifier(none,v),identifier(none,r)],[]),add(none,integer(none,1),max(none,set_extension(none,[extended_expr(none,treeDepth,[identifier(none,l)],[]),extended_expr(none,treeDepth,[identifier(none,r)],[])]))))]),operator(mirror,[argument(t,extended_expr(none,'Tree',[identifier(none,'T')],[]))],truth(none),[],[case(t,[],extended_expr(none,empty,[],[]),extended_expr(none,empty,[],[])),case(t,[l,r,v],extended_expr(none,tree,[identifier(none,l),identifier(none,v),identifier(none,r)],[]),extended_expr(none,tree,[extended_expr(none,mirror,[identifier(none,r)],[]),identifier(none,v),extended_expr(none,mirror,[identifier(none,l)],[])],[]))])],[],[]),theory(theory_name('MathExtensions','FixPoint'),[],['S'],[],[operator(fix,[argument(f,pow_subset(none,cartesian_product(none,pow_subset(none,identifier(none,'S')),pow_subset(none,identifier(none,'S')))))],conjunct(none,forall(none,[identifier(none,s)],implication(none,truth(none),conjunct(none,member(none,identifier(none,s),domain(none,identifier(none,f))),member(none,identifier(none,f),partial_function(none,pow_subset(none,identifier(none,'S')),pow_subset(none,identifier(none,'S'))))))),not_equal(none,event_b_comprehension_set(none,[identifier(none,s)],identifier(none,s),subset(none,function(none,identifier(none,f),[identifier(none,s)]),identifier(none,s))),empty_set(none))),[general_intersection(none,event_b_comprehension_set(none,[identifier(none,s)],identifier(none,s),subset(none,function(none,identifier(none,f),[identifier(none,s)]),identifier(none,s))))],[])],[],[]),theory(theory_name('MathExtensions',closure),[theory_name('MathExtensions','FixPoint')],['S'],[],[operator(cls,[argument(r,pow_subset(none,cartesian_product(none,identifier(none,'S'),identifier(none,'S'))))],conjunct(none,forall(none,[identifier(none,s)],implication(none,truth(none),conjunct(none,member(none,identifier(none,s),domain(none,event_b_comprehension_set(none,[identifier(none,s)],couple(none,[identifier(none,s),union(none,identifier(none,r),composition(none,identifier(none,s),identifier(none,r)))]),member(none,identifier(none,s),pow_subset(none,cartesian_product(none,identifier(none,'S'),identifier(none,'S'))))))),member(none,event_b_comprehension_set(none,[identifier(none,s)],couple(none,[identifier(none,s),union(none,identifier(none,r),composition(none,identifier(none,s),identifier(none,r)))]),member(none,identifier(none,s),pow_subset(none,cartesian_product(none,identifier(none,'S'),identifier(none,'S'))))),partial_function(none,pow_subset(none,cartesian_product(none,identifier(none,'S'),identifier(none,'S'))),pow_subset(none,cartesian_product(none,identifier(none,'S'),identifier(none,'S')))))))),not_equal(none,event_b_comprehension_set(none,[identifier(none,s)],identifier(none,s),subset(none,function(none,event_b_comprehension_set(none,[identifier(none,s)],couple(none,[identifier(none,s),union(none,identifier(none,r),composition(none,identifier(none,s),identifier(none,r)))]),member(none,identifier(none,s),pow_subset(none,cartesian_product(none,identifier(none,'S'),identifier(none,'S'))))),[identifier(none,s)]),identifier(none,s))),empty_set(none))),[extended_expr(none,fix,[event_b_comprehension_set(none,[identifier(none,s)],couple(none,[identifier(none,s),union(none,identifier(none,r),composition(none,identifier(none,s),identifier(none,r)))]),member(none,identifier(none,s),pow_subset(none,cartesian_product(none,identifier(none,'S'),identifier(none,'S')))))],[])],[])],[],[tag(cls,closure1)]),theory(theory_name('MathExtensions','List'),[],['S','T'],[datatype('List',[identifier(none,'T')],[constructor(nil,[]),constructor(cons,[destructor(head,identifier(none,'T')),destructor(tail,extended_expr(none,'List',[identifier(none,'T')],[]))])])],[operator(listSize,[argument(l,extended_expr(none,'List',[identifier(none,'T')],[]))],truth(none),[],[case(l,[],extended_expr(none,nil,[],[]),integer(none,0)),case(l,[l0,x],extended_expr(none,cons,[identifier(none,x),identifier(none,l0)],[]),add(none,integer(none,1),extended_expr(none,listSize,[identifier(none,l0)],[])))]),operator(append,[argument(l,extended_expr(none,'List',[identifier(none,'T')],[])),argument(x,identifier(none,'T'))],truth(none),[],[case(l,[],extended_expr(none,nil,[],[]),extended_expr(none,cons,[identifier(none,x),extended_expr(none,nil,[],[])],[])),case(l,[l0,x0],extended_expr(none,cons,[identifier(none,x0),identifier(none,l0)],[]),extended_expr(none,cons,[identifier(none,x0),extended_expr(none,append,[identifier(none,l0),identifier(none,x)],[])],[]))]),operator(rev,[argument(l,extended_expr(none,'List',[identifier(none,'T')],[]))],truth(none),[],[case(l,[],extended_expr(none,nil,[],[]),extended_expr(none,nil,[],[])),case(l,[l0,x],extended_expr(none,cons,[identifier(none,x),identifier(none,l0)],[]),extended_expr(none,append,[extended_expr(none,rev,[identifier(none,l0)],[]),identifier(none,x)],[]))]),operator(comp,[argument(l,extended_expr(none,'List',[identifier(none,'T')],[])),argument(f,pow_subset(none,cartesian_product(none,identifier(none,'T'),identifier(none,'S'))))],truth(none),[],[case(l,[],extended_expr(none,nil,[],[]),extended_expr(none,nil,[],[])),case(l,[l0,x],extended_expr(none,cons,[identifier(none,x),identifier(none,l0)],[]),extended_expr(none,cons,[function(none,identifier(none,f),[identifier(none,x)]),extended_expr(none,comp,[identifier(none,l0),identifier(none,f)],[])],[]))]),operator(conc,[argument(l1,extended_expr(none,'List',[identifier(none,'T')],[])),argument(l2,extended_expr(none,'List',[identifier(none,'T')],[]))],truth(none),[],[case(l1,[],extended_expr(none,nil,[],[]),identifier(none,l2)),case(l1,[l0,x],extended_expr(none,cons,[identifier(none,x),identifier(none,l0)],[]),extended_expr(none,cons,[identifier(none,x),extended_expr(none,conc,[identifier(none,l0),identifier(none,l2)],[])],[]))]),operator(flatten,[argument(l,extended_expr(none,'List',[extended_expr(none,'List',[identifier(none,'T')],[])],[]))],truth(none),[],[case(l,[],extended_expr(none,nil,[],[]),extended_expr(none,nil,[],[])),case(l,[l0,ll0],extended_expr(none,cons,[identifier(none,l0),identifier(none,ll0)],[]),extended_expr(none,conc,[identifier(none,l0),extended_expr(none,flatten,[identifier(none,ll0)],[])],[]))])],[],[]),theory(theory_name('TheoryTests',listHelper),[theory_name('MathExtensions','List')],['T'],[],[operator(atPos,[argument(l,extended_expr(none,'List',[identifier(none,'T')],[])),argument(p,integer_set(none)),argument(x,identifier(none,'T'))],truth(none),[],[case(l,[],extended_expr(none,nil,[],[]),falsity(none)),case(l,[h,t],extended_expr(none,cons,[identifier(none,h),identifier(none,t)],[]),disjunct(none,conjunct(none,equal(none,identifier(none,p),integer(none,0)),equal(none,identifier(none,h),identifier(none,x))),conjunct(none,greater(none,identifier(none,p),integer(none,0)),extended_pred(none,atPos,[identifier(none,t),minus(none,identifier(none,p),integer(none,1)),identifier(none,x)],[]))))])],[],[])],_Error)).

